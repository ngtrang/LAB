labs(title = "MAPE for different horizons") +
geom_line() +
geom_point(size=3)+
theme(plot.title = element_text(hjust = 0.5))
#gp <- ggplotly(gp)
print(gp)
#return(df)
outlist <- list("MAPE" = df,"rank" =ranks)
return(outlist)
}
if(sort == TRUE) {
ab <-df[order(df[,1]),]
cv <- ranks[order(ranks[,1]),]
outlist <- list("MAPE" = ab,"rank" =cv)
return(outlist)
}
}
calculateMAPEs(FORAYear)
calculateMAPEs(FORAYear, sort = TRUE)
#' Measures of forecast accuracy: Mean Absolute Percent Error (MAPE)
#'
#' @param frame a data frame from dataset containing columns "actual", "forecast" and "Method"
#' @return data frame of mean absolute percent error for diferent methods and diferent forecast horizons
#' @export
#' @examples
#'
#' calcullateMAPEs(frame)
calculateMAPEs <- function(frame, sort = FALSE){
out <-matrix(NA, nrow = length(unique(frame$Method)), ncol = length(unique(frame$horizon)))
methodlist <- list()
horizonlist <- list()
MAPElist <- list()
MAPE <- c()
df = data.frame(out)
colnames(df) <- paste("horizon = ", 1:length(unique(frame$horizon)), sep ="")
rownames(df) <- unique(frame$Method)
ranks = data.frame(out)
colnames(ranks) <- paste("horizon = ", 1:length(unique(frame$horizon)), sep ="")
rownames(ranks) <- unique(frame$Method)
r <- c()
outlist <- list()
for(j in as.vector(unique(frame$horizon))){
for(i in as.vector(unique(frame$Method))){
# округление до 2 знака
#df[i, j] <-  round(mean(100*abs((subset(frame, Method == i & horizon == j)$forecast - subset(frame, Method == i & horizon == j)$actual)/subset(frame, Method == i & horizon == j)$actual), na.rm=TRUE), 2)
df[i, j] <-  mean(100*abs((subset(frame, Method == i & horizon == j)$forecast - subset(frame, Method == i & horizon == j)$actual)/subset(frame, Method == i & horizon == j)$actual), na.rm=TRUE)
#out[i, j] <-  round(mean(100*abs((subset(frame, Method == i & horizon == j)$forecast - subset(frame, Method == i & horizon == j)$actual)/subset(frame, Method == i & horizon == j)$actual)), 2)
}
}
assign("df", df , envir = .GlobalEnv)
for (k in 1:length(unique(frame$horizon))){
ranks[,k] <- rank(df[, k])
}
assign("ranks", ranks , envir = .GlobalEnv)
#df2 <- df$Method <- as.vector(unique(frame$Method))
for(m in 1:length(unique(frame$Method))){
MAPElist[[m]] <- unname(df[m,])
methodlist[[m]] <- rep(as.vector(unique(frame$Method))[m],length(unique(frame$horizon)))
horizonlist[[m]]<- as.vector(unique(frame$horizon))
#MAPE[m] <- Reduce(c, df[m,])
}
MAPE1 <- Reduce(c, MAPElist)
MAPE <- Reduce(c, MAPE1)
#MAPE <- Reduce(c, MAPElist)
horizon <- Reduce(c, horizonlist)
Method = Reduce(c, methodlist)
df2 <- data.frame(MAPE, horizon, Method )
#assign("dataplot", dataplot , envir = .GlobalEnv)
#assign("horizonlist", horizonlist , envir = .GlobalEnv)
#assign("methodlist", methodlist , envir = .GlobalEnv)
#assign("MAPElist", MAPElist , envir = .GlobalEnv)
#return(df)
#assign("MAPE", MAPE , envir = .GlobalEnv)
#assign("df", df , envir = .GlobalEnv)
assign("df2", df2 , envir = .GlobalEnv)
library(ggplot2)
#library(plotly)
gp <- ggplot(df2,aes(x=horizon, y=MAPE, group=Method,color=Method, shape=Method)) +
scale_shape_manual(values=1:nlevels(df2$Method)) +
labs(title = "MAPE for different horizons") +
geom_line() +
geom_point(size=3)+
theme(plot.title = element_text(hjust = 0.5))
#gp <- ggplotly(gp)
print(gp)
#return(df)
outlist <- list("MAPE" = df,"rank" =ranks)
if(sort == FALSE){
return(outlist)
}else{
ab <-df[order(df[,1]),]
cv <- ranks[order(ranks[,1]),]
outlist <- list("MAPE" = ab,"rank" =cv)
return(outlist)
}
}
calculateMAPEs(FORAYear)
calculateMAPEs(FORAYear, sort = TRUE)
#' Measures of forecast accuracy: Mean Absolute Percent Error (MAPE)
#'
#' @param frame a data frame from dataset containing columns "actual", "forecast" and "Method"
#' @return data frame of mean absolute percent error for diferent methods and diferent forecast horizons
#' @export
#' @examples
#'
#' calcullateMAPEs(frame)
calculateMAPEs <- function(frame, sort = FALSE){
out <-matrix(NA, nrow = length(unique(frame$Method)), ncol = length(unique(frame$horizon)))
methodlist <- list()
horizonlist <- list()
MAPElist <- list()
MAPE <- c()
df = data.frame(out)
colnames(df) <- paste("horizon = ", 1:length(unique(frame$horizon)), sep ="")
rownames(df) <- unique(frame$Method)
ranks = data.frame(out)
colnames(ranks) <- paste("horizon = ", 1:length(unique(frame$horizon)), sep ="")
rownames(ranks) <- unique(frame$Method)
r <- c()
outlist <- list()
for(j in as.vector(unique(frame$horizon))){
for(i in as.vector(unique(frame$Method))){
# округление до 2 знака
#df[i, j] <-  round(mean(100*abs((subset(frame, Method == i & horizon == j)$forecast - subset(frame, Method == i & horizon == j)$actual)/subset(frame, Method == i & horizon == j)$actual), na.rm=TRUE), 2)
df[i, j] <-  mean(100*abs((subset(frame, Method == i & horizon == j)$forecast - subset(frame, Method == i & horizon == j)$actual)/subset(frame, Method == i & horizon == j)$actual), na.rm=TRUE)
#out[i, j] <-  round(mean(100*abs((subset(frame, Method == i & horizon == j)$forecast - subset(frame, Method == i & horizon == j)$actual)/subset(frame, Method == i & horizon == j)$actual)), 2)
}
}
assign("df", df , envir = .GlobalEnv)
for (k in 1:length(unique(frame$horizon))){
ranks[,k] <- rank(df[, k])
}
assign("ranks", ranks , envir = .GlobalEnv)
#df2 <- df$Method <- as.vector(unique(frame$Method))
for(m in 1:length(unique(frame$Method))){
MAPElist[[m]] <- unname(df[m,])
methodlist[[m]] <- rep(as.vector(unique(frame$Method))[m],length(unique(frame$horizon)))
horizonlist[[m]]<- as.vector(unique(frame$horizon))
#MAPE[m] <- Reduce(c, df[m,])
}
MAPE1 <- Reduce(c, MAPElist)
MAPE <- Reduce(c, MAPE1)
#MAPE <- Reduce(c, MAPElist)
horizon <- Reduce(c, horizonlist)
Method = Reduce(c, methodlist)
df2 <- data.frame(MAPE, horizon, Method )
#assign("dataplot", dataplot , envir = .GlobalEnv)
#assign("horizonlist", horizonlist , envir = .GlobalEnv)
#assign("methodlist", methodlist , envir = .GlobalEnv)
#assign("MAPElist", MAPElist , envir = .GlobalEnv)
#return(df)
#assign("MAPE", MAPE , envir = .GlobalEnv)
#assign("df", df , envir = .GlobalEnv)
assign("df2", df2 , envir = .GlobalEnv)
library(ggplot2)
#library(plotly)
gp <- ggplot(df2,aes(x=horizon, y=MAPE, group=Method,color=Method, shape=Method)) +
scale_shape_manual(values=1:nlevels(df2$Method)) +
labs(title = "MAPE for different horizons") +
geom_line() +
geom_point(size=3)+
theme(plot.title = element_text(hjust = 0.5))
#gp <- ggplotly(gp)
print(gp)
#return(df)
outlist <- list("MAPE" = df,"rank" =ranks)
if(sort == FALSE){
return(outlist)
}else{
frame1 <-df[order(df[,1]),]
frame2 <- ranks[order(ranks[,1]),]
outlist <- list("MAPE" = fram1,"rank" = frame2)
return(outlist)
}
}
help(package = "FORA")
anh <- c(-12, -13, -14, -16, 23, 34, 23, 32, 42)
df <- data.frame(anh)
df$em[anh<0]<- "mal"
df$em[anh<0]<- "man"
df
df$em[anh>0]<- "man"
df
df <- data.frame(anh)
df$em[anh >=0] <- "man"
df$em[anh < 0] <- "mal"
df
library(ggplot2)
gp <- ggplot(df, aes)
gp <- ggplot(df, aes(x = em, y = anh)) + geom_boxplot()
gp
load("~/R/FORA/data/FORAYear.rda")
boxplotAPEs <- function(frame){
APE <- list()
for(i in 1 : length(frame$method)){
APE[[i]] <-abs((frame$actual[i] - frame$forecast[i])/frame$actual[i])
}
APE <- Reduce(c, APE)
df <- cbind(frame, "APE" = APE)
assign("df", df , envir = .GlobalEnv)
library(ggplot2)
gp <- ggplot(df, aes(x = method, y = APE)) + geom_boxplot() + coord_flip()
return(gp)
}
boxplotAPEs(FORAYear)
View(df)
df1 <- subset(df, method =="NAIVE2")
df2 <- subset(df, method =="HOLT")
df3 <- cbind(df1, df2)
boxplotAPEs(df3)
View(df3)
df3 <- rbind(df1, df2)
boxplotAPEs(df3)
df3 <- df[1:20,]
boxplotAPEs(FORAYear)
df3 <- df[1:30,]
boxplotAPEs(Fdf3)
boxplotAPEs(df3)
boxplotAPEs <- function(frame){
APE <- list()
for(i in 1 : length(frame$method)){
APE[[i]] <-(frame$actual[i] - frame$forecast[i])/frame$actual[i]
}
APE <- Reduce(c, APE)
df <- cbind(frame, "APE" = APE)
assign("df", df , envir = .GlobalEnv)
library(ggplot2)
gp <- ggplot(df, aes(x = method, y = APE)) + geom_boxplot() + coord_flip()
return(gp)
}
boxplotAPEs(df3)
df
# Boxplot Absolute Percentage error for the given data from dataset
# frame: A given data frame from dataset containing columns "actual"  "forecast" "method" and "horizon"
# sort: Logical. If TRUE the resulting list of MAPEs frame and rank frame of MAPEs sorting by horizon =1. If not specify by default
# MAPE: Dataframe of Mean Absolute Percentage Error for diferent horizons and methods
# rank: Ranking dataframe of Mean Percentage Absolute Error for diferent horizons and methods
boxplotAPEs <- function(frame){
APE <- list()
for(i in 1 : length(frame$method)){
APE[[i]] <-(frame$forecast[i] - frame$actual[i])/frame$actual[i]
}
APE <- Reduce(c, APE)
df <- cbind(frame, "APE" = APE)
assign("df", df , envir = .GlobalEnv)
library(ggplot2)
gp <- ggplot(df, aes(x = method, y = APE)) + geom_boxplot() + coord_flip()
return(gp)
}
boxplotAPEs(FORAYear)
load("~/R/FORA/data/FORAOther.rda")
boxplotAPEs(FOROther)
boxplotAPEs(FORAOther)
# Boxplot Absolute Percentage error for the given data from dataset
# frame: A given data frame from dataset containing columns "actual"  "forecast" "method" and "horizon"
# sort: Logical. If TRUE the resulting list of MAPEs frame and rank frame of MAPEs sorting by horizon =1. If not specify by default
# MAPE: Dataframe of Mean Absolute Percentage Error for diferent horizons and methods
# rank: Ranking dataframe of Mean Percentage Absolute Error for diferent horizons and methods
boxplotAPEs <- function(frame){
APE <- list()
for(i in 1 : length(frame$method)){
APE[[i]] <-(frame$actual[i] - frame$forecast[i])/frame$actual[i]
}
APE <- Reduce(c, APE)
df <- cbind(frame, "APE" = APE)
assign("df", df , envir = .GlobalEnv)
library(ggplot2)
gp <- ggplot(df, aes(x = method, y = APE)) + geom_boxplot() + coord_flip()
return(gp)
}
boxplotAPEs(FORAOther)
# Boxplot Absolute Percentage error for the given data from dataset
# frame: A given data frame from dataset containing columns "actual"  "forecast" "method" and "horizon"
# sort: Logical. If TRUE the resulting list of MAPEs frame and rank frame of MAPEs sorting by horizon =1. If not specify by default
# MAPE: Dataframe of Mean Absolute Percentage Error for diferent horizons and methods
# rank: Ranking dataframe of Mean Percentage Absolute Error for diferent horizons and methods
boxplotAPEs <- function(frame){
APE <- list()
for(i in 1 : length(frame$method)){
APE[[i]] <-abs((frame$actual[i] - frame$forecast[i])/frame$actual[i])
}
APE <- Reduce(c, APE)
df <- cbind(frame, "APE" = APE)
assign("df", df , envir = .GlobalEnv)
library(ggplot2)
gp <- ggplot(df, aes(x = method, y = APE)) + geom_boxplot() + coord_flip()
return(gp)
}
boxplotAPEs(FORAOther)
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
```{r}
plot(cars)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
plot(cars)
plot(cars)
x <- c(1,2,3,4,5,6,7,8,9, 10)
lagged_differences <- diff(x)
lagged_differences
lagged_differences <- diff(x, lag = 1)
lagged_differences
1 < 0
a <- c(2,3,4)
b <- c(4,5,6)
a < b
mean(a < b)
a <- c(2,3,4)
b <- c(1,4,5)
a < b
mean(a < b)
mean(a . b)
mean(a > b)
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
wilcox.test(x, y, paired = TRUE, alternative = "greater")
wilcox.test(y - x, alternative = "less")
wilcox.test(y - x, alternative = "less",
exact = FALSE, correct = FALSE)
wilcox.test(x, y, paired = TRUE)
wilcox.test(x, y)
wilcox.test(jitter(x), jitter(y))
wilcox.test(jitter(x)-jitter(y))
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
wilcox.test(x, y, alternative = "greater")
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
wilcox.test(x, y, paired = TRUE)
y-x
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
wilcox.test(x, y, paired = TRUE, alternative = "greater")
wilcox.test(y - x, alternative = "less", exact = FALSE, correct = FALSE)
damn <- function(x)  ## x should be a vector
{
p <- list()
for(j in x)
{
out <- tryCatch({
if(j %% 2 == 0) p <- append(p, j)
else p <- append(p, 101)
}, error = function(e)
{
p <- append(p, "not")
return(p)
}
#cat('Yet another error replaced by NA \\n')
)
}
return(out)
}
a1 <- damn(list(2,4,6,1.8,"a"))
a1
getMeanLossDiff <- function(frame, benchmark_method){
out <-matrix(NA, nrow = length(unique(frame$method)), ncol = 5)
df1 <- data.frame(out)
rownames(df1) <- unique(frame$method)
colnames(df1) <- c("Mean Loss Diff", "Median Loss Diff", "Trimean Loss Diff", "Wilcoxon test(p-value)", "symmetry_test")
bmethod = list()
for(i in unique(frame$series)){
bmethod[[i]] <- rep(subset(frame, series ==i & method == benchmark_method)$loss, length(unique(frame$method)))
}
bmethod <- Reduce(c, bmethod)
frame <- cbind(frame, "bmethod" = bmethod)
loss_diff <- bmethod - frame$loss
df <- data.frame("timestamp" = frame$timestamp, "series" = frame$series, "method" = frame$method, "loss_diff" = loss_diff)
assign("df", df , envir = .GlobalEnv)
library(lawstat)
for(i in unique(frame$method)){
df1[i, 1] <- mean((subset(df, method == i)$loss_diff))
df1[i, 2] <- median((subset(df, method == i)$loss_diff))
qs <- quantile(subset(df, method == i)$loss_diff, c(0.25, 0.5, 0.75))
df1[i, 3] <- as.numeric((qs[2] + (qs[1] + qs[3])/2)/2)
df1[i, 4] <- wilcox.test(subset(frame, method == i)$loss, subset(frame, method == i)$bmethod , paired = TRUE, alternative = "greater")$p.value
df1[i, 4] <- wilcox.test(subset(df, method == i)$loss_diff, alternative = "both")$p.value
df1[i, 5] <- tryCatch(symmetry.test(subset(df, method == i)$loss_diff, boot = FALSE)$p.value, error = function(e) NaN)
}
assign("df1", df1 , envir = .GlobalEnv)
return(df1)
}
# TM <- function(x){
#   qs <- quantile(x, c(0.25, 0.5, 0.75))
#   return(as.numeric((qs[2] + (qs[1] + qs[3])/2)/2))
# }
plot(pressure)
summary(cars)
library(M3FORA)
devtools::install_github("svcuonghvktqs/M3FORA")
library(M3FORA)
plot.xts(M3Year, si = "Y1")
plot.xts(M3Year, si = "Y1", method = c("NAIVE2, "SINGLE))
plot.xts(M3Year, si = "Y1", method = c("NAIVE2, "SINGLE""))
plot.xts(M3Year, si = "Y1", method = c("NAIVE2, "SINGLE"))
plot.xts(M3Year, si = "Y1", method = c("NAIVE2", "SINGLE"))
plot.xts(M3Year, si = "Y10", method = c("NAIVE2", "SINGLE"))
plot.xts(M3Year, si = "Y10", method = c("NAIVE2", "HOLT"))
# extracting DWT coefficients (with Haar filter)
library(wavelets)
wtData <- NULL
for (i in 1:nrow(sc)) {
a <- t(sc[i,])
wt <- dwt(a, filter=”haar”, boundary=”periodic”)
wtData <- rbind(wtData, unlist(c(wt@W,wt@V[[wt@level]])))
}
wtData <- as.data.frame(wtData)
# set class labels into categorical values
classId <- c(rep(“1″,100), rep(“2″,100), rep(“3″,100) ,rep(“4″,100), rep(“5″,100), rep(“6″,100))
wtSc <- data.frame(cbind(classId, wtData))
# build a decision tree with ctree() in package party
library(party)
ct <- ctree(classId ~ ., data=wtSc, controls = ctree_control(minsplit=30, minbucket=10, maxdepth=5))
pClassId <- predict(ct)
# check predicted classes against original class labels
table(classId, pClassId)
# accuracy
(sum(classId==pClassId)) / nrow(wtSc)
plot(ct, ip_args=list(pval=FALSE), ep_args=list(digits=0))
library(wavelets)
wtData <- NULL
for (i in 1:nrow(sc)) {
a <- t(sc[i,])
wt <- dwt(a, filter=”haar”, boundary=”periodic”)
wtData <- rbind(wtData, unlist(c(wt@W,wt@V[[wt@level]])))
}
wtData <- as.data.frame(wtData)
# set class labels into categorical values
classId <- c(rep(“1″,100), rep(“2″,100), rep(“3″,100) ,rep(“4″,100), rep(“5″,100), rep(“6″,100))
wtSc <- data.frame(cbind(classId, wtData))
# extracting DWT coefficients (with Haar filter)
library(wavelets)
wtData <- NULL
for (i in 1:nrow(sc)) {
a <- t(sc[i,])
wt <- dwt(a, filter="haar", boundary="periodic")
wtData <- rbind(wtData, unlist(c(wt@W,wt@V[[wt@level]])))
}
wtData <- as.data.frame(wtData)
# set class labels into categorical values
classId <- c(rep("1",100), rep("2",100), rep("3",100) ,rep("4",100), rep("5",100), rep("6",100))
wtSc <- data.frame(cbind(classId, wtData)
# build a decision tree with ctree() in package party
library(party)
ct <- ctree(classId ~ ., data=wtSc, controls = ctree_control(minsplit=30, minbucket=10, maxdepth=5))
pClassId <- predict(ct)
# check predicted classes against original class labels
table(classId, pClassId)
# accuracy
(sum(classId==pClassId)) / nrow(wtSc)
plot(ct, ip_args=list(pval=FALSE), ep_args=list(digits=0))
library(wavelets)
wtData <- NULL
for (i in 1:nrow(sc)) {
a <- t(sc[i,])
wt <- dwt(a, filter="haar", boundary="periodic")
wtData <- rbind(wtData, unlist(c(wt@W,wt@V[[wt@level]])))
}
wtData <- as.data.frame(wtData)
# set class labels into categorical values
classId <- c(rep("1",100), rep("2",100), rep("3",100) ,rep("4",100), rep("5",100), rep("6",100))
wtSc <- data.frame(cbind(classId, wtData)
# extracting DWT coefficients (with Haar filter)
sc <- read.table("synthetic_control.data", header = F, sep = "")
library(wavelets)
wtData <- NULL
for (i in 1:nrow(sc)) {
a <- t(sc[i,])
wt <- dwt(a, filter="haar", boundary="periodic")
wtData <- rbind(wtData, unlist(c(wt@W,wt@V[[wt@level]])))
}
wtData <- as.data.frame(wtData)
# set class labels into categorical values
classId <- c(rep("1",100), rep("2",100), rep("3",100) ,rep("4",100), rep("5",100), rep("6",100))
wtSc <- data.frame(cbind(classId, wtData))
# build a decision tree with ctree() in package party
library(party)
ct <- ctree(classId ~ ., data=wtSc, controls = ctree_control(minsplit=30, minbucket=10, maxdepth=5))
pClassId <- predict(ct)
# check predicted classes against original class labels
table(classId, pClassId)
# accuracy
(sum(classId==pClassId)) / nrow(wtSc)
plot(ct, ip_args=list(pval=FALSE), ep_args=list(digits=0))
sc <- read.table("synthetic_control.data", header = F, sep = "")
setwd("~/R/LAB/LAB 4")
sc <- read.table("synthetic_control.data", header = F, sep = "")
library(wavelets)
wtData <- NULL
for (i in 1:nrow(sc)) {
a <- t(sc[i,])
wt <- dwt(a, filter="haar", boundary="periodic")
wtData <- rbind(wtData, unlist(c(wt@W,wt@V[[wt@level]])))
}
wtData <- as.data.frame(wtData)
# set class labels into categorical values
classId <- c(rep("1",100), rep("2",100), rep("3",100) ,rep("4",100), rep("5",100), rep("6",100))
wtSc <- data.frame(cbind(classId, wtData))
# build a decision tree with ctree() in package party
library(party)
ct <- ctree(classId ~ ., data=wtSc, controls = ctree_control(minsplit=30, minbucket=10, maxdepth=5))
pClassId <- predict(ct)
# check predicted classes against original class labels
table(classId, pClassId)
# accuracy
(sum(classId==pClassId)) / nrow(wtSc)
plot(ct, ip_args=list(pval=FALSE), ep_args=list(digits=0))
